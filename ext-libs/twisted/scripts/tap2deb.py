import argparse
import shutil
import subprocess
import sys

from pathlib import Path


def save_to_file(file_path: Path, text: str) -> None:
    """Write text to a file at file_path.

    Args:
        file_path (Path): The file path to write to.
        text (str): The text to write to the file.

    Raises:
        PermissionError: If the file cannot be written to.
    """
    file_path.parent.mkdir(parents=True, exist_ok=True)
    try:
        with file_path.open("w") as f:
            f.write(text)
    except PermissionError as e:
        print(f"Permission denied: {file_path}", file=sys.stderr)
        raise e

def run_command(command: list[str]) -> None:
    """Run a command with the given arguments.

    Args:
        command (list[str]): The command and its arguments.

    Raises:
        subprocess.CalledProcessError: If the command exits with a non-zero exit code.
    """
    try:
        subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Command '{e.cmd}' failed with exit code {e.returncode}", file=sys.stderr)
        raise e

def main() -> None:
    """Create a Debian package from a Twisted tap file.
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("tapfile", help="The tap file to use for the package.")
    parser.add_argument("--maintainer", help="The maintainer's name and email in the format 'John Doe <johndoe@example.com>'.")
    parser.add_argument("--protocol", help="The protocol name for the package.")
    parser.add_argument("--description", help="The package description.")
    parser.add_argument("--long-description", help="The long package description.")
    parser.add_argument("--set-version", default="1.0", help="The package version.")
    parser.add_argument("--debfile", help="The package file name.")
    parser.add_argument("--type", default="tap", choices=["tap", "xml", "source", "python"], help="The package file type.")
    parser.add_argument("--unsigned", action="store_true", help="Do not sign the package.")

    args = parser.parse_args()

    if not args.maintainer:
        print("Error: maintainer must be specified.", file=sys.stderr)
        sys.exit(1)

    type_dict = {
        "tap": "file",
        "python": "python",
        "source": "source",
        "xml": "xml",
    }

    base_tap_file = Path(args.tapfile).name
    protocol = args.protocol or Path(args.tapfile).stem
    deb_file = args.debfile or f"twisted-{protocol}"
    version = args.set_version
    maintainer = args.maintainer
    description = args.description or f"A Twisted-based server for {protocol}"
    long_description = args.long_description or "Automatically created by tap2deb"
    twistd_option = type_dict[args.type]
    date = Path("/tmp").open("822-date").read().strip()
    directory = Path(f"{deb_file}-{version}").absolute()
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}"

    if directory.exists():
        shutil.rmtree(directory)

    directory.mkdir(parents=True)

    shutil.copy(args.tapfile, directory / base_tap_file)

    save_to_file(directory / "debian" / "README.Debian", "This package was auto-generated by tap2deb\n")

    save_to_file(
        directory / "debian" / "conffiles",
        """\
/etc/init.d/{deb_file}
/etc/default/{deb_file}
/etc/{base_tap_file}
""".format(**locals()),
    )

    save_to_file(
        directory / "debian" / "default",
        """\
pidfile=/var/run/{deb_file}.pid
rundir=/var/lib/{deb_file}/
file=/etc/{tap_file}
logfile=/var/log/{deb_file}.log
 """.format(**locals()),
    )

    save_to_file(
        directory / "debian" / "init.d",
        """\
#!/bin/sh

PATH=/sbin:/bin:/usr/sbin:/usr/bin

pidfile=/var/run/{deb_file}.pid \
rundir=/var/lib/{deb_file}/ \
file=/etc/{tap_file} \
logfile=/var/log/{deb_file}.log

[ -r /etc/default/{deb_file} ] && . /etc/default/{deb_file}

test -x /usr/bin/twistd{python_version} || exit 0
test -r $file || exit 0
test -r /usr/share/{deb_file}/package-installed || exit 0


case "$1" in
    start)
        echo -n "
